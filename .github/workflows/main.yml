  name: CI/CD workflow
  on: push
  env:
    SERVER_PRODUCTION_IP: "51.38.177.231"
    SERVER_STANGING_IP: "51.38.177.231"
    SERVER_PRODUCTION_USER: root

  jobs:
    tests-frontend:
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ./frontend
      steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: install node
          uses: actions/setup-node@v3
          with:
            cache: npm
            cache-dependency-path: ./frontend/package-lock.json
        - name: install dependencies
          run: npm ci --prefer-offline
        - name: run linter
          run: npm run lint
        - name: npm audit
          run: npm audit fix --audit-level=moderate

    tests-backend:
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ./node-api
      steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: install node
          uses: actions/setup-node@v3
          with:
            cache: npm
            cache-dependency-path: ./node-api/package-lock.json
        - name: install dependencies
          run: npm ci --prefer-offline
        - name: run linter
          run: npm run lint
        - name: npm audit
          run: npm audit fix --audit-level=moderate
        - name: exec unit tests
          run: npm run test:ci
        - name: upload coverage reports to Codecov
          uses: codecov/codecov-action@v3
          env:
            CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    build-frontend-and-node-api:
      needs: [tests-frontend, tests-backend]
      runs-on: ubuntu-latest
      strategy:
        matrix:
          include:
            - context_name: ./frontend
              image_name: ghcr.io/edkel20/cicd-projet2/frontend:latest
            - context_name: ./node-api
              image_name: ghcr.io/edkel20/cicd-projet2/node-api:latest
      permissions:
        packages: write
      steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: set up QEMU
          uses: docker/setup-qemu-action@v3
        - name: set up docker buildx
          uses: docker/setup-buildx-action@v3
        - name: docker meta
          id: meta
          uses: docker/metadata-action@v3
          with:
            images: ${{ matrix.image_name }}
        - name: login to github container registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: build and push
          uses: docker/build-push-action@v5
          with:
            context: ${{ matrix.context_name }}
            push: true
            tags: ${{ matrix.image_name }}
            cache-from: type=gha
            cache-to: type=gha,mode=max

    e2e:
      needs: build-frontend-and-node-api
      runs-on: ubuntu-latest
      steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: login to github container registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: lauch e2e tests
          run: |
            docker compose up --exit-code-from cypress --abort-on-container-exit
        - name: clean container
          run: |
            docker compose down -v --remove-orphans

    deploy-staging:
      needs: e2e
      runs-on: ubuntu-latest
      environment:
        name: stanging
        url: http//${{ env.SERVER_STANGING_IP }}
      steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: connexion production server
          uses: ./.github/actions/deploy
          with:
            vps_key: ${{ secrets.VPS_KEY }}
            server_ip: ${{ env.SERVER_STANGING_IP }}
            token_github: ${{ secrets.GITHUB_TOKEN }}

    deploy-production:
      needs: e2e
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'
      environment:
        name: production
        url: http//${{ env.SERVER_PRODUCTION_IP }}
      steps:
        - name: checkout
          uses: actions/checkout@v4
        - name: connexion production server
          uses: ./.github/actions/deploy
          with:
            vps_key: ${{ secrets.VPS_KEY }}
            server_ip: ${{ env.SERVER_PRODUCTION_IP }}
            token_github: ${{ secrets.GITHUB_TOKEN }}
